// +build go1.12
// +build !go1.15

package goloader

import (
	"encoding/binary"
	"errors"
	"fmt"
	"unsafe"
)

const stackObjectRecordSize = unsafe.Sizeof(stackObjectRecord{})

// A stackObjectRecord is generated by the compiler for each stack object in a stack frame.
// This record must match the generator code in cmd/compile/internal/gc/ssa.go:emitStackObjects.
type stackObjectRecord struct {
	// offset in frame
	// if negative, offset from varp
	// if non-negative, offset from argp
	off int
	typ *_type
}

func _addStackObject(codereloc *CodeReloc, funcname string, symbolMap map[string]uintptr) (err error) {
	Func := codereloc.symMap[funcname].Func
	if Func != nil && len(Func.FuncData) > _FUNCDATA_StackObjects &&
		codereloc.stkmaps[Func.FuncData[_FUNCDATA_StackObjects].Sym.Name] != nil {
		b := codereloc.stkmaps[Func.FuncData[_FUNCDATA_StackObjects].Sym.Name]
		n := *(*int)(unsafe.Pointer(&b[0]))
		p := unsafe.Pointer(&b[PtrSize])
		for i := 0; i < n; i++ {
			obj := *(*stackObjectRecord)(p)
			name := EMPTY_STRING
			for _, v := range Func.Var {
				if v.Offset == (int64)(obj.off) {
					name = v.Type.Name
					break
				}
			}
			if len(name) == 0 {
				stkobjName := funcname + STKOBJ_SUFFIX
				if symbol := codereloc.symMap[stkobjName]; symbol != nil {
					name = symbol.Reloc[i].Sym.Name
				}
			}
			if ptr, ok := symbolMap[name]; !ok {
				err = errors.New(fmt.Sprintf("unresolve external Var! Function name:%s index:%d, name:%s", funcname, i, name))
			} else {
				off := PtrSize + i*(int)(stackObjectRecordSize) + PtrSize
				if PtrSize == 4 {
					binary.LittleEndian.PutUint32(b[off:], *(*uint32)(unsafe.Pointer(&ptr)))
				} else {
					binary.LittleEndian.PutUint64(b[off:], *(*uint64)(unsafe.Pointer(&ptr)))
				}
			}
			p = add(p, stackObjectRecordSize)
		}
	}
	return err
}
