// +build go1.12
// +build !go1.15

package goloader

import (
	"encoding/binary"
	"strconv"
	"unsafe"
)

const stackObjectRecordSize = unsafe.Sizeof(stackObjectRecord{})

// A stackObjectRecord is generated by the compiler for each stack object in a stack frame.
// This record must match the generator code in cmd/compile/internal/gc/ssa.go:emitStackObjects.
type stackObjectRecord struct {
	// offset in frame
	// if negative, offset from varp
	// if non-negative, offset from argp
	off int
	typ *_type
}

func _addStackObject(code *CodeReloc, fi *funcInfoData, seg *segment, symPtr map[string]uintptr) {
	if len(fi.funcdata) > _FUNCDATA_StackObjects && code.Mod.stkmaps[fi.funcdata[_FUNCDATA_StackObjects]] != nil {
		b := code.Mod.stkmaps[fi.funcdata[_FUNCDATA_StackObjects]]
		n := *(*int)(unsafe.Pointer(&b[0]))
		p := unsafe.Pointer(&b[PtrSize])
		for i := 0; i < n; i++ {
			obj := *(*stackObjectRecord)(p)
			var name string
			for _, v := range fi.Var {
				if v.Offset == (int64)(obj.off) {
					name = v.Type.Name
					break
				}
			}
			if len(name) == 0 {
				name = fi.stkobjReloc[i].Sym.Name
			}
			ptr, ok := symPtr[name]
			if !ok {
				if _, ok = code.SymMap[name]; ok {
					ptr = uintptr(seg.symAddrs[code.SymMap[name]])
				}
			}
			if !ok {
				sprintf(&seg.err, "unresolve external:", strconv.Itoa(i), " ", fi.name, "\n")
			} else {
				off := PtrSize + i*(int)(stackObjectRecordSize) + PtrSize
				if PtrSize == 4 {
					binary.LittleEndian.PutUint32(b[off:], *(*uint32)(unsafe.Pointer(&ptr)))
				} else {
					binary.LittleEndian.PutUint64(b[off:], *(*uint64)(unsafe.Pointer(&ptr)))
				}
			}
			p = add(p, stackObjectRecordSize)
		}
	}
}
